-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Initial project template from stack
--   
--   Please see README.md
@package hamilton
@version 0.1.0.0

module Numeric.Hamilton

-- | Represents a physical system in which physics happens. A
--   <tt><a>System</a> m n</tt> is a system whose state described using
--   <tt>n</tt> generalized coordinates (an "<tt>n</tt>-dimensional"
--   system), where the underlying cartesian coordinate space is
--   <tt>m</tt>-dimensional.
--   
--   For the most part, you are supposed to be able to ignore <tt>m</tt>.
--   <tt>m</tt> is only provided because it's useful when plotting/drawing
--   the system with a given state back in rectangular coordinates.
--   
--   A <tt><a>System</a> m n</tt>'s state is described using a
--   <tt><a>Config</a> n</tt> (which describes the system in configuration
--   space) or a <tt><a>Phase</a> n</tt> (which describes the system in
--   phase space).
data System :: Nat -> Nat -> Type

-- | Represents the full state of a system of <tt>n</tt> generalized
--   coordinates in configuration space (informally, "positions and
--   velocities")
--   
--   A configuration space representaiton is more directly "physically
--   meaningful" and intuitive/understandable to humans than a phase space
--   representation. However, it's much less mathematically ideal to work
--   with because of the lack of some neat underlying symmetries.
--   
--   You can convert a <tt><a>Config</a> n</tt> into a <tt><a>Phase</a>
--   n</tt> (convert from configuration space to phase space) for a given
--   system with <a>mkPhase</a>. This allows you to state your system in
--   configuration space and then convert it to phase space before handing
--   it off to the hamiltonian machinery.
data Config :: Nat -> Type
[Cfg] :: {cfgPos :: !(R n)  The current values ("positions") of each of the @n@ generalized coordinates, cfgVel :: !(R n)  The current rate of changes ("velocities") of each of the @n@ generalized coordinates} -> Config n

-- | Represents the full state of a system of <tt>n</tt> generalized
--   coordinates in phase space (informally, "positions and momentums").
--   
--   Phase space representations are much nicer to work with mathematically
--   because of some neat underlying symmetries. For one, positions and
--   momentums are "interchangeable" in a system; if you swap every
--   coordinate's positions with their momentums, and also swap them in the
--   equations of motions, you get the same system back. This isn't the
--   case with configuration space representations.
--   
--   A hamiltonian simulation basically describes the trajectory of each
--   coordinate through phase space, so this is the <i>state</i> of the
--   simulation. However, configuration space representations are much more
--   understandable to humans, so it might be useful to give an initial
--   state in configuration space using <a>Config</a>, and then convert it
--   to a <a>Phase</a> with <a>mkPhase</a>.
data Phase :: Nat -> Type
[Phs] :: {phsPos :: !(R n)  The current values ("positions") of each of the @n@ generalized coordinates., phsMom :: !(R n)  The current conjugate momenta ("momentums") to each of the @n@ generalized coordinates} -> Phase n

-- | Create a system with <tt>n</tt> generalized coordinates by providing
--   the underlying inertials, describing its coordinate space, and giving
--   pontential energy function.
--   
--   Given by describing some fundamental properties of the underlying
--   cartesian coordinate space of the system (the inertia of each
--   coordinate and the potential energy function), along with a conversion
--   function from the generalized coordinate space to the underlying
--   cartesian coordinate space.
mkSystem :: forall m n. (KnownNat m, KnownNat n) => R m -> (forall a. RealFloat a => Vector n a -> Vector m a) -> (forall a. RealFloat a => Vector m a -> a) -> System m n

-- | Convert a configuration-space representaiton of the state of the
--   system to a phase-space representation.
--   
--   Useful because the hamiltonian simulations use <a>Phase</a> as its
--   working state, but <a>Config</a> is a much more human-understandable
--   and intuitive representation. This allows you to state your starting
--   state in configuration space and convert to phase space for your
--   simulation to use.
mkPhase :: (KnownNat m, KnownNat n) => System m n -> Config n -> Phase n

-- | Invert <a>mkPhase</a> and convert a description of a system's state in
--   phase space to a description of the system's state in configuration
--   space.
--   
--   Possibly useful for showing the phase space representation of a
--   system's state in a more human-readable/human-understandable way.
fromPhase :: (KnownNat m, KnownNat n) => System m n -> Phase n -> Config n

-- | Compute the generalized momenta conjugate to each generalized
--   coordinate of a system by giving the configuration-space state of the
--   system.
momenta :: (KnownNat m, KnownNat n) => System m n -> Config n -> R n

-- | Compute the rate of change of each generalized coordinate by giving
--   the state of the system in phase space.
velocities :: (KnownNat m, KnownNat n) => System m n -> Phase n -> R n

-- | The kinetic energy of a system, given the system's state in
--   configuration space.
keC :: (KnownNat m, KnownNat n) => System m n -> Config n -> Double

-- | The kinetic energy of a system, given the system's state in phase
--   space.
keP :: (KnownNat m, KnownNat n) => System m n -> Phase n -> Double

-- | The Lagrangian of a system (the difference between the kinetic energy
--   and the potential energy), given the system's state in configuration
--   space.
lagrangian :: (KnownNat m, KnownNat n) => System m n -> Config n -> Double

-- | The Hamiltonian of a system (the sum of kinetic energy and the
--   potential energy), given the system's state in phase space.
hamiltonian :: (KnownNat m, KnownNat n) => System m n -> Phase n -> Double
